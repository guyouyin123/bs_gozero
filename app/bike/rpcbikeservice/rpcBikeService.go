// Code generated by goctl. DO NOT EDIT!
// Source: bike.proto

package rpcbikeservice

import (
	"context"

	"bs_gozero/app/bike/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetBikeInfoReq = pb.GetBikeInfoReq
	GetBikeInfoRes = pb.GetBikeInfoRes

	RpcBikeService interface {
		RpcGetBikeInfo(ctx context.Context, in *GetBikeInfoRes, opts ...grpc.CallOption) (*GetBikeInfoReq, error)
	}

	defaultRpcBikeService struct {
		cli zrpc.Client
	}
)

func NewRpcBikeService(cli zrpc.Client) RpcBikeService {
	return &defaultRpcBikeService{
		cli: cli,
	}
}

func (m *defaultRpcBikeService) RpcGetBikeInfo(ctx context.Context, in *GetBikeInfoRes, opts ...grpc.CallOption) (*GetBikeInfoReq, error) {
	client := pb.NewRpcBikeServiceClient(m.cli.Conn())
	return client.RpcGetBikeInfo(ctx, in, opts...)
}
